var documenterSearchIndex = {"docs":
[{"location":"dynamicalsystem.html#Dynamical-System","page":"Dynamical systems","title":"Dynamical System","text":"","category":"section"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"In UniversalDynamics a Dynamical System or, more precisely, a Stochastic Dynamical System represents a continuous time, D-dimensional Ito System of Stochastic Differential Equations:","category":"page"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"dvecu(t) = f(t vecu(t)) cdot dt + g(t vecu(t)) cdot dvecW(t) quad vecu(t_0) = vecu_0","category":"page"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"with drift coefficient f colon leftt_0 T right times mathbbR^D rightarrow mathbbR^D, diffusion coefficient g colon left t_0 T right times mathbbR^D rightarrow mathbbR^D times M, M-dimensional driving Wiener correlated or uncorrelated process dvecW(t) and initial condition vecu_0.","category":"page"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"The previous equation represent the most general case of a Dynamical System, which is referenced as the non-diagonal noise case. There are other simpler cases that are really important and are implemented in the library, namely:","category":"page"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"ScalarNoise\nDiagonalNoise","category":"page"},{"location":"dynamicalsystem.html#UniversalDynamics.ScalarNoise","page":"Dynamical systems","title":"UniversalDynamics.ScalarNoise","text":"ScalarNoise <: AbstractNoise{1}\n\nA D-dimensional system has ScalarNoise when there is only a unique noise process that affects all the Stochastic Differential Equations. In that sense, the system is given by:\n\ndu(t) = f(t u(t))  dt + g(t u(t))  dW(t) quad u(t_0) = u₀\n\nwith drift coefficient f colon left t₀ T right  mathbbRᴰ  mathbbRᴰ, diffusion coefficient g colon left t₀ T right  mathbbRᴰ  mathbbRᴰ, 1-dimensional driving Wiener process dW(t) and initial condition u₀.\n\n\n\n\n\n","category":"type"},{"location":"dynamicalsystem.html#UniversalDynamics.DiagonalNoise","page":"Dynamical systems","title":"UniversalDynamics.DiagonalNoise","text":"DiagonalNoise{M} <: AbstractNoise{M}\n\nA D-dimensional system has DiagonalNoise when there are M = D noise processes that affect each Stochastic Differential Equation individually. In that sense, the system is given by:\n\ndu(t) = f(t u(t))  dt + g(t u(t))  dvecW(t) quad u(t_0) = u₀\n\nwith drift coefficient f colon left t₀ T right  mathbbRᴰ  mathbbRᴰ, diffusion coefficient g colon left t₀ T right  mathbbR^D  mathrmdiag colon mathbbR^D  D, D-dimensional driving Wiener correlated or uncorrelated process dvecW(t) and initial condition u₀.\n\n\n\n\n\n","category":"type"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"In the context of quantitative finance we might want to declare a DynamicalSystem formed by a set of dynamics, with either arbitrary or known coefficients. To take this into account, UniversalDynamics uses the following type architecture:","category":"page"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"abstract type AbstractDynamics{InPlace,Dim,NoiseDim,DiagNoise,elType} end\n\nabstract type ModelDynamics{D,M,IIP,DN,T} <: AbstractDynamics{D,M,IIP,DN,T} end\n\nstruct SystemDynamics{IIP,D,M,DN,T,A} <: AbstractDynamics{IIP,D,M,DN,T}\n    attributes::A\nend","category":"page"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"SystemDynamics","category":"page"},{"location":"dynamicalsystem.html#UniversalDynamics.SystemDynamics","page":"Dynamical systems","title":"UniversalDynamics.SystemDynamics","text":"SystemDynamics{IIP,D,M,DN,T,A} <: AbstractDynamics{IIP,D,M,DN,T}\n\nRepresents arbitrary system dynamics with:\n\nIn place coefficients if IIP is true, otherwise it is assumed to have out of place coefficients,\nDynamics dimension D,\nNoise dimension M,\nDiagonal noise if DN is true and non-diagonal noise otherwise,\ninitial time t0,\ninitial state x0,\ncorrelation matrix ρ, and\nWiener process noise.\n\nSystem Dynamics declaration\n\nSystemDynamics(x0::S;\n    t0=zero(eltype(S)), ρ::R=I, noise::AbstractNoise=DiagonalNoise{length(x0)}(),\n) -> SystemDynamics\n\nreturns a SystemDynamics with the given state or initial condition x0, intial time t0, correlation matrix ρ and a driving Wiener process noise. Remaining type parameters are obtained through:\n\nIIP depends on the type of x0 and it is true if isa(x0, Vector) or false if isa(x0, Real) or isa(x0, SVector),\nD equals to length(x0),\nM is determined by noise and its default value is equal to D,\nDN is determined by noise, which is DiagonalNoise by default.\n\n\n\n\n\n","category":"type"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"SystemDynamics representing arbitrary dynamics;\nModelDynamics representing known models dynamics, such as:\nBlackScholesMerton,\nShortRateModelDynamics,\nLiborMarketModelDynamics,\nHeathJarrowMortonFrameworkDynamics,\nHestonModelDynamics,\n...","category":"page"},{"location":"dynamicalsystem.html#Dynamical-System-definition","page":"Dynamical systems","title":"Dynamical System definition","text":"","category":"section"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"Supose we want to price a european option on a stock S with stochastic interest rates (sacar del cap 1 del Andersen). In this context we need to simulate, for example, a short rate described by any ShortRateModelDynamics and a stock price given by a SystemDynamics.","category":"page"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"TODO: equations","category":"page"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"# define dynamics\nx = MultiFactorAffineModelDynamics(x0, ϰ, θ, Σ, α, β, ξ₀, ξ₁)\nS = SystemDynamics(S0; noise=NonDiagonalNoise(Mₛ))\n\n# container\ndynamics = OrderedDict(:x => x, :S => S)\n\n# define dynamical system formed by the given dynamics\ndynamical_system = DynamicalSystem(dynamics)","category":"page"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"This will allow the user to check important attributes...","category":"page"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"However, in order to solve a DynamicalSystem, the drift f and the diffusion g functions must be provided.","category":"page"},{"location":"index.html#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"UniversalDynamics is a high-performance library designed to achieve fast and advanced quantitative finance calculations. It is being developed by SciQuant, an organization dedicated to creating high-quality scientific software for the financial industry.","category":"page"},{"location":"index.html#Getting-Started","page":"Introduction","title":"Getting Started","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"The package can be installed using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"pkg> add https://github.com/SciQuant/UniversalDynamics.jl.git","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Or, equivalently, via the Pkg API:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"julia> import Pkg; Pkg.add(PackageSpec(url = \"https://github.com/SciQuant/UniversalDynamics.jl.git\"))","category":"page"}]
}
