var documenterSearchIndex = {"docs":
[{"location":"dynamicalsystem.html#Dynamics","page":"Dynamical systems","title":"Dynamics","text":"","category":"section"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"The AbstractDynamics type represents continuous time, D-dimensional Ito Systems of Stochastic Differential Equations:","category":"page"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"dvecu(t) = f(t vecu(t)) cdot dt + g(t vecu(t)) cdot dvecW(t) quad vecu(t_0) = vecu_0","category":"page"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"with drift coefficient f colon leftt_0 T right times mathbbR^D rightarrow mathbbR^D, diffusion coefficient g colon left t_0 T right times mathbbR^D rightarrow mathbbR^D times M, M-dimensional driving Wiener correlated or uncorrelated process dvecW(t) and initial condition vecu_0.","category":"page"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"The previous equation states the most general case of a Dynamics, which has non-diagonal noise. There are other simpler noise cases that are really common, namely:","category":"page"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"ScalarNoise\nDiagonalNoise\nNonDiagonalNoise","category":"page"},{"location":"dynamicalsystem.html#UniversalDynamics.ScalarNoise","page":"Dynamical systems","title":"UniversalDynamics.ScalarNoise","text":"ScalarNoise <: AbstractNoise{1}\n\nA D-dimensional system has ScalarNoise when there is only a unique noise process that affects all the Stochastic Differential Equations. In that sense, the system is given by:\n\ndu(t) = f(t u(t))  dt + g(t u(t))  dW(t) quad u(t₀) = u₀\n\nwith drift coefficient f colon left t₀ T right  mathbbRᴰ  mathbbRᴰ, diffusion coefficient g colon left t₀ T right  mathbbRᴰ  mathbbRᴰ, 1-dimensional driving Wiener process dW(t) and initial condition u₀.\n\n\n\n\n\n","category":"type"},{"location":"dynamicalsystem.html#UniversalDynamics.DiagonalNoise","page":"Dynamical systems","title":"UniversalDynamics.DiagonalNoise","text":"DiagonalNoise{M} <: AbstractNoise{M}\n\nA D-dimensional system has DiagonalNoise when there are M = D noise processes that affect each Stochastic Differential Equation individually. In that sense, the system is given by:\n\ndu(t) = f(t u(t))  dt + g(t u(t))  dvecW(t) quad u(t₀) = u₀\n\nwith drift coefficient f colon left t₀ T right  mathbbRᴰ  mathbbRᴰ, diffusion coefficient g colon left t₀ T right  mathbbR^D  mathrmdiag colon mathbbR^D  D, D-dimensional driving Wiener correlated or uncorrelated process dvecW(t) and initial condition u₀.\n\nIn these kind of systems, the diagonal of g(t u(t)) is represented by a D-dimensional vector. Then, the product g(t u(t))  dvecW(t) is replaced by the broadcasted product .*.\n\n\n\n\n\n","category":"type"},{"location":"dynamicalsystem.html#UniversalDynamics.NonDiagonalNoise","page":"Dynamical systems","title":"UniversalDynamics.NonDiagonalNoise","text":"NonDiagonalNoise{M} <: AbstractNoise{M}\n\nA D-dimensional system has NonDiagonalNoise when there are M noise processes that affect the Stochastic Differential Equations. In that sense, the system is given by:\n\ndu(t) = f(t u(t))  dt + g(t u(t))  dvecW(t) quad u(t₀) = u₀\n\nwith drift coefficient f colon left t₀ T right  mathbbRᴰ  mathbbRᴰ, diffusion coefficient g colon left t₀ T right  mathbbRᴰ  mathbbR^D  M, M-dimensional driving Wiener correlated or uncorrelated process dvecW(t) and initial condition u₀.\n\n\n\n\n\n","category":"type"},{"location":"dynamicalsystem.html#Dynamics-representation","page":"Dynamical systems","title":"Dynamics representation","text":"","category":"section"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"Dynamics are represented by two main types:","category":"page"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"SystemDynamics","category":"page"},{"location":"dynamicalsystem.html#UniversalDynamics.SystemDynamics","page":"Dynamical systems","title":"UniversalDynamics.SystemDynamics","text":"SystemDynamics{IIP,D,M,DN,T,A} <: AbstractDynamics{IIP,D,M,DN,T}\n\nRepresents dynamics with arbitrary coefficients.\n\nType parameters:\n\nIIP: states wether coefficients are in or out of place,\nD: dynamics dimension,\nM: noise dimension,\nDN: indicates if the noise is of DiagonalNoise or NonDiagonalNoise type,\n\nFields:\n\nt0: initial time,\nx0: initial state,\nρ: correlation matrix, and\nnoise: Wiener process.\n\nDeclaration\n\nSystemDynamics(x0::S;\n    t0=zero(eltype(S)), ρ::R=I, noise::AbstractNoise=DiagonalNoise{length(x0)}(),\n) -> SystemDynamics\n\nreturns a SystemDynamics with the given fields, such as state or initial condition x0, intial time t0, correlation matrix ρ and a driving Wiener process noise. Remaining type parameters are obtained through:\n\nIIP: true if isa(x0, Vector) or false if isa(x0, Union{Real,SVector}),\nD: equals to length(x0),\nM: is determined by noise and its default value is equal to D,\nDN: is determined by noise, which is DiagonalNoise{D} by default.\n\n\n\n\n\n","category":"type"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"ModelDynamics representing dynamics with known coefficients.","category":"page"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"Dynamics with known coefficients are implemented as subtypes of ModelDynamics. Some examples include:","category":"page"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"BlackScholesMerton,\nShortRateModelDynamics,\nLiborMarketModelDynamics,\nHeathJarrowMortonFrameworkDynamics,\nHestonModelDynamics,\n...","category":"page"},{"location":"dynamicalsystem.html#Dynamical-System","page":"Dynamical systems","title":"Dynamical System","text":"","category":"section"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"A DynamicalSystem is formed by a collection of AbstractDynamics, with either arbitrary or known coefficients.","category":"page"},{"location":"dynamicalsystem.html#Dynamical-System-definition","page":"Dynamical systems","title":"Dynamical System definition","text":"","category":"section"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"Supose we want to price a european option on a stock S with stochastic interest rates (sacar del cap 1 del Andersen). In this context we need to simulate, for example, a short rate described by any ShortRateModelDynamics and a stock price given by a SystemDynamics.","category":"page"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"TODO: equations","category":"page"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"# define dynamics\nx = MultiFactorAffineModelDynamics(x0, ϰ, θ, Σ, α, β, ξ₀, ξ₁)\nS = SystemDynamics(S0; noise=NonDiagonalNoise(Mₛ))\n\n# container\ndynamics = OrderedDict(:x => x, :S => S)\n\n# define dynamical system formed by the given dynamics\ndynamical_system = DynamicalSystem(dynamics)","category":"page"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"This will allow the user to check important attributes...","category":"page"},{"location":"dynamicalsystem.html","page":"Dynamical systems","title":"Dynamical systems","text":"However, in order to solve a DynamicalSystem, the drift f and the diffusion g functions must be provided.","category":"page"},{"location":"index.html#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"UniversalDynamics is a high-performance library designed to achieve fast and advanced quantitative finance calculations. It is being developed by SciQuant, an organization dedicated to creating high-quality scientific software for the financial industry.","category":"page"},{"location":"index.html#Getting-Started","page":"Introduction","title":"Getting Started","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"The package can be installed using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"pkg> add https://github.com/SciQuant/UniversalDynamics.jl.git","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Or, equivalently, via the Pkg API:","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"julia> import Pkg; Pkg.add(PackageSpec(url = \"https://github.com/SciQuant/UniversalDynamics.jl.git\"))","category":"page"}]
}
